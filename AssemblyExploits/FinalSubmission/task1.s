#SEC204 TASK1 2018/2019
#   INSTRUCTIONS
#	This file is intended for compilation on 32bit systems using the x86 instruction set
#	place file in desired folder
#	enter the following commands from a terminal in the same directory as this file
#	as --32 --gstabs -o task1.o task1.s
#       ld -m elf_i386 -dynamic-linker /lib/ld-linux.so.2 -o task1 -lc task1.o
#	To run the file enter
#	./task1
#	while in the same folder and follow the prompts given by the program
  
.section .data
average:
    	.string "Your average score is %d \n"
question:
	.string "Please enter your name: \n"

.section .text
.globl _start
_start:
		pushl	%eax
		call	srand 		#requires a pushed value to seed properly
		pushl   %ebp 		#pushes base pointer
        	movl    %esp, %ebp 	#sets stack pointer to base
        	subl    $32, %esp  	#frees up 32 bytes to put stuff in
        	movl    $0, -4(%ebp) 	#empties where the random number is going
        	movl    $0, %eax 	#clears eax for getRand to write to it
        	call    getRand
		movl    %edx, -4(%ebp) 	#stores the random number on the stack
		movl    $0, -8(%ebp)	#clears  where the 2nd random number is going
		movl    $0, %eax	#clears eax for getRand to write to it
        	call    getRand
		movl    %edx, -8(%ebp) 	#stores the random number on the stack
		
		#AVERAGE
		mov	-8(%ebp), %ebx 	#put random num 2 in ebx
		mov	-4(%ebp), %eax 	#put random num 1 in eax
		add	%ebx, %eax	#add the two together in eax for dividing
		mov	$2, %ecx	#put 2 in ecx for the divide
		mov	$0, %edx	#clears 
		div	%ecx		#divides eax by ecx (2)
		movl    %eax, -4(%ebp) 	#stores average back on the stack
		
		#GET NAME
		pushl	$question	
		call	printf		#prints question
		add	$4, %esp 	#removes question from the stack
		lea	(%esp), %eax	#puts stack pointers memory address into the eax so gets() pushes to the stack
		movl 	%eax, (%esp)	#moves above from eax to the address contained in the esp
		call	gets		#reads in inputs and shoves them onto stack, overwrites average of the random numbers if exceeding 27 					     #characters
		add	$28, %esp 	#moves from current esp to where the random average is stored
		push	$average
		call	printf		#prints result
		pushl	$0 		#push successfull exit code to the stack
		call	exit
		
getRand:
    		call rand
    		mov $0, %edx		#edx has to be empty for div to write the remainder to it
    		mov $100, %ebx		#loading the value we want to divide by
    		div %ebx		#divides the eax by the ebx, storing the result in the eax and the remainder in the edx
    		add $1, %ebx		#adds 1 to the 0-99 value to make it 1-100
    		ret
